"""
Django settings for real project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
from celery.schedules import crontab
from dotenv import load_dotenv

load_dotenv()

DOMAIN = "https://weav.it"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

DEBUG = os.getenv("DEBUG") == "True"

TWILIO_DISABLED = False

ALLOWED_HOSTS = ["*"]

CSRF_TRUSTED_ORIGINS = ["https://weav.it"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django.contrib.gis",
    "rest_framework",
    "rest_framework.authtoken",
    "django_extensions",
    "leaflet",
    "channels",
    "django_cleanup.apps.CleanupConfig",
    "fieldsignals",
    "django_phonenumbers",
    "django_celery_beat",
    "storages",
    # My Apps
    "throttling.apps.ThrottlingConfig",
    "users.apps.UsersConfig",
    "profiles.apps.ProfilesConfig",
    "business.apps.BusinessConfig",
    "moments.apps.MomentsConfig",
    "posts.apps.PostsConfig",
    "chat.apps.ChatConfig",
    "insights.apps.InsightsConfig",
    "shared.apps.SharedConfig",
    "discussions.apps.DiscussionsConfig",
    "devices.apps.DevicesConfig",
    "spots.apps.SpotsConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.static",
            ],
        },
    },
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
}

if not DEBUG:
    REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"] = {
        "anon": "200/day",
        "user": "1000/day",
        "unauthenticated_user": "15/min",
        "mixin": "1000/day",
    }
else:
    REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"] = {
        "anon": "10000/day",
        "user": "10000/day",
        "unauthenticated_user": "10000/day",
        "mixin": "10000/day",
    }

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "USER": os.getenv("POSTGRES_USER"),
        "NAME": os.getenv("POSTGRES_NAME"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
    },
}

AUTH_USER_MODEL = "users.User"
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "users.backends.UserBackend",
]

# ASGI & Channels
ASGI_APPLICATION = "backend.asgi.application"

REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
REDIS_DOMAIN = f"redis://:{REDIS_PASSWORD}@redis:6379/0"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_DOMAIN)],
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_DOMAIN,
    }
}

# AWS S3

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {},
    },
}


AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")

AWS_S3_CUSTOM_DOMAIN = "weav-app.s3-accelerate.amazonaws.com"
# "%s.s3.%s.amazonaws.com" % (
#     AWS_STORAGE_BUCKET_NAME,
#     AWS_S3_REGION_NAME,
# )


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "logs/errors.log"),
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file"],
            "propagate": True,
            "level": "WARNING",
        },
    },
}

# CELERY

CELERY_BROKER_URL = REDIS_DOMAIN
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "Europe/Rome"

CELERY_BEAT_SCHEDULE = {
    # Send weekly updates to users every Friday at 3:01 PM
    "send-weekly-updates": {
        "task": "users.tasks.send_weekly_updates",
        "schedule": crontab(hour=3, minute=1, day_of_week=5),
    },
}

# EMAIL

EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# API Keys

GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
MAP_BOX_ACCESS_TOKEN = os.getenv("MAP_BOX_ACCESS_TOKEN")

# iOS Push Notifications

APNS_AUTH_KEY = os.path.join(BASE_DIR, "certificates/apns.p8")
SIGN_IN_AUTH_KEY = os.path.join(BASE_DIR, "certificates/sign-in.p8")

IOS_TEAM_ID = os.getenv("IOS_TEAM_ID")
IOS_APP_BUNDLE_ID = os.getenv("IOS_APP_BUNDLE_ID")

APNS_KEY_ID = os.getenv("APNS_KEY_ID")
SIGN_IN_KEY_ID = os.getenv("SIGN_IN_KEY_ID")

# Android Push Notifications

FIREBASE_API_KEY = os.getenv("FIREBASE_API_KEY")

# Twilio

TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_PHONE_NUMBER = os.getenv("TWILIO_PHONE_NUMBER")

# Telegram

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
